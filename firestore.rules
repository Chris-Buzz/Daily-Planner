rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User settings subcollection
      match /settings/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User tasks subcollection
      match /tasks/{taskId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Validate task data structure
        allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateTaskData(request.resource.data);
        
        allow update: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateTaskData(request.resource.data);
      }
      
      // User notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User habits subcollection  
      match /habits/{habitId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User analytics subcollection (read-only for users)
      match /analytics/{analyticsId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Global collections (admin only or specific access)
    match /global/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only through server-side
    }
    
    // System notifications (read-only for authenticated users)
    match /system_notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only
    }
    
    // Block all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Helper function to validate task data
function validateTaskData(data) {
  return data.keys().hasAll(['title', 'userId']) &&
         data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
         data.userId is string &&
         (!('description' in data) || (data.description is string && data.description.size() <= 1000)) &&
         (!('completed' in data) || data.completed is bool) &&
         (!('priority' in data) || data.priority in ['low', 'medium', 'high']) &&
         (!('time' in data) || data.time is string) &&
         (!('date' in data) || data.date is string) &&
         (!('color' in data) || data.color is string) &&
         (!('tags' in data) || (data.tags is list && data.tags.size() <= 10));
}